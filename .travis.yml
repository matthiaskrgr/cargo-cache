language: rust
#dist: xenial

#cache deps
#cache: cargo

env:
  global:
    - CRATE_NAME=cargo-cache
    - RUST_BACKTRACE=full

matrix:
  fast_finish: false
  include:
# windows nightly
    - name: "windows nightly release"
      os: windows
      rust: nightly
      env: RELEASE="--release"

    - name: "windows nightly debug"
      os: windows
      rust: nightly
      env: RELEASE="" DEBUG="--debug"
# osx nightly
    - name: "nightly osx release"
      os: osx
      rust: nightly
      env: RELEASE="--release"

    - name: "nightly osx debug"
      os: osx
      rust: nightly
      env: RELEASE="" DEBUG="--debug"
# linux stable
    - name: "stable linux release"
      os: linux
      rust: stable
      env: RELEASE="--release"

    - name: "stable linux debug"
      os: linux
      rust: stable
      env: RELEASE="" DEBUG="--debug"
# linux beta
    - name: "beta linux release"
      os: linux
      rust: beta
      env: RELEASE="--release"

    - name: "beta linux debug"
      os: linux
      rust: beta
      env: RELEASE="" DEBUG="--debug"
# linux nightly
    - name: "nightly linux release"
      os: linux
      rust: nightly
      env: RELEASE="--release"

    - name: "nightly linux debug"
      os: linux
      rust: nightly
      env: RELEASE="" DEBUG="--debug"

# linux tools
    - name: "clippy"
      os: linux
      rust: nightly
      script:
        - EXIT="false"
        - rustup component add clippy-preview --toolchain=nightly || cargo install --git https://github.com/rust-lang/rust-clippy/ --force clippy || EXIT="true"
# don't fail the build if clippy fails to build
        - if [[ $EXIT == "true" ]]; then exit; fi
        - cargo clippy --all-targets --all-features -- -D warnings

    - name: "cargo audit"
      os: linux
      rust: beta
      script:
        - cargo install cargo-audit --debug
        - cargo audit


    - name: "rustfmt"
      os: linux
      rust: nightly
      script:
        - rustup component add rustfmt-preview --toolchain=nightly || cargo install rustfmt-nightly --force || cargo install --git https://github.com/rust-lang/rustfmt/ --force  || EXIT="true"
# don't fail the build if clippy fails to build
        - if [[ $EXIT == "true" ]]; then exit; fi
        - cargo fmt --all -- --check

script:
  - cargo build --all ${RELEASE}
  - cargo test --all ${RELEASE} -- --nocapture
  - if [[ "$RELEASE" == "" ]] &&  [[ "$TRAVIS_RUST_VERSION" == "nightly" ]]; then cargo test --features bench; fi
  - if [[ "$RELEASE" == "--release" ]] && [[ "$TRAVIS_RUST_VERSION" == "nightly" ]]; then cargo test --features bench --release; fi
  - if [[ "$RELEASE" == "--release" ]] && [[ "$TRAVIS_RUST_VERSION" == "nightly" ]]; then cargo bench; fi
  - if [[ "$RELEASE" == "--release" ]] && [[ "$TRAVIS_RUST_VERSION" == "nightly" ]]; then cargo bench --features bench; fi
  - cargo run ${RELEASE}
  - cargo install --force --path . ${DEBUG}
  - cargo-cache
  - cargo cache
  - cargo cache --help
  - cargo cache --top-cache-items 20
  - cargo cache --gc --dry-run
  - cargo cache --gc
  - cargo cache --info
  - cargo cache --list-dirs
  - cargo cache --keep-duplicate-crates 10 --dry-run
  - cargo cache --keep-duplicate-crates 1  --dry-run
  - cargo cache --keep-duplicate-crates 0  --dry-run


before_deploy:
  - [[ "$TRAVIS_OS_NAME" == windows ]] && EXE_SUFFIX=.exe
  - ( cd target/release/ && tar -czf "$TRAVIS_BUILD_DIR"/"$CRATE_NAME"-"$TRAVIS_TAG"-"$TRAVIS_OS_NAME".tar.gz "${CRATE_NAME}${EXE_SUFFIX}" )

deploy:
- provider: releases
  # edge: true
  api_key: "$GITHUB_TOKEN"
  file_glob: true
  file: "$CRATE_NAME-$TRAVIS_TAG-$TRAVIS_OS_NAME.tar.gz"
  on:
    condition: $TRAVIS_RUST_VERSION = "nightly" && $RELEASE = "--release"
    tags: true
  skip_cleanup: true
